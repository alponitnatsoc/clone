{% extends "::base.html.twig" %}

{% block fos_user_content %}

<div id='registrationFormContainer' class=''>
{{ form_start(form) }}

<ul class="nav nav-tabs">
  <li class="active"><a data-toggle="tab" href="#basicData">Tab 1</a></li>
  <li><a data-toggle="tab" href="#contactData">Tab 2</a></li>
  <li><a data-toggle="tab" href="#workplacesData">Tab 3</a></li>
</ul>

<div class="tab-content">
	<div id="basicData" class="tab-pane fade in active">
	    {# render the task's only field: description #}
	    {{ form_row(form.youAre) }}
	    {{ form_row(form.person.documentType) }}
	    {{ form_row(form.person.document) }}
	    {{ form_row(form.person.names) }}
	    {{ form_row(form.person.lastName1) }}
	    {{ form_row(form.person.lastName2) }}
	    {{ form_row(form.person.birthDate) }}
	    <a class="btn btn-primary btnNext" >Siguiente</a>

	</div>

	<div id="contactData" class="tab-pane fade in">
	    {{ form_row(form.person.mainAddress) }}
	    {{ form_row(form.person.neighborhood) }}
	    {{ form_row(form.person.phone) }}
	    {{ form_row(form.person.department) }}
	    {{ form_row(form.person.city) }}
	    <a class="btn btn-primary btnPrevious" >Anterior</a>
	    <a class="btn btn-primary btnNext" >Siguiente</a>

    </div>

    <div id="workplacesData" class="tab-pane fade h3">
	    <in>Workplaces</h3>
	    	{{ form_row(form.numberOfWorkplaces) }}
	    {# iterate over each existing workplaces and render its fields #}
		<ul class="workplaces" data-prototype="{{ form_widget(form.workplaces.vars.prototype)|e }}" >
	   	{% for workplace in form.workplaces %}
	        <li id="workSpace_{{loop.index}}" class="workSpaceLi">
	        	{{ form_row(workplace.mainAddress) }}
	        	{{ form_row(workplace.department) }}
	        	{{ form_row(workplace.city) }}
	        </li>
	    {% endfor %}
	    </ul>
	    <a class="btn btn-primary btnPrevious" >Anterior</a>
	    {{ form_row(form.save) }}
    </div>




</div>



{{ form_end(form) }}
</div>

{% endblock fos_user_content %}
{% block javascripts%}
{{ parent() }}
<script>
var $collectionHolder;
jQuery(document).ready(function() {

	$collectionHolder = $('ul.workplaces');
	    // count the current form inputs we have (e.g. 2), use that as the new
	    // index when inserting a new item (e.g. 2)
	$collectionHolder.data('index', ($collectionHolder.find(':input').length)/3);
	//el cambio de tabs entre el formulario de registro
		$('.btnNext').click(function(){
		  $('.nav-tabs > .active').next('li').find('a').trigger('click');
		});
		$('.btnPrevious').click(function(){
		  $('.nav-tabs > .active').prev('li').find('a').trigger('click');
		});

	//funcion que agrega un listener a cada department
	addListeners();

	//colocar el select en el valor del tama√±o del arreglo
	$dropDownWork=$collectionHolder.data('index');
	$('#register_employer_numberOfWorkplaces').val($dropDownWork);
	//listener para el que agrega workplaces
	$('#register_employer_numberOfWorkplaces').change(function() {

		// get the numberof Workplaces that the user wants
		var workplacesCount= $(this).val();
		// get the new index the numer of workplaces that the user has on screen
		var index = parseInt($collectionHolder.data('index'));
		var diference=workplacesCount-index;
		if (diference<0) {
			//remove the diference of workplaces;
			diference=diference+1;
			for (var i = diference; i <= 0; i++) {
				$('#workSpace_'+(index)).remove();
				console.log("Index Dele:" + index );
				index=parseInt(index)-1;
			};
			$collectionHolder.data('index', workplacesCount);


		}
		else{
			//add the diference of workplaces
			for (var i = 0; i < diference; i++) {
				// Get the data-prototype explained earlier
			    var prototype = $collectionHolder.data('prototype');
			    // Replace '__name__' in the prototype's HTML to
			    // instead be a number based on how many items we have
			    var newForm = prototype.replace(/__name__/g, index);
			    // increase the index with one for the next item
			    $collectionHolder.data('index', index + 1);
			    index=parseInt(index)+1;
			    console.log("Index New:" + index );
			    // Display the form in the page in an li, before the "Add a tag" link li
			    var $newFormLi = $('<li id="workSpace_'+ index +'" class="workSpaceLi"></li>').append(newForm);
			    $collectionHolder.append($newFormLi);
			};
			//add the correspondig listeners
			addListeners();
		};
	});
});
function addListeners() {
    $('select').filter(function() {
	        return this.id.match(/department/);
	    }).change(function() {
	  var $department = $(this);
	  // ... retrieve the corresponding form.
	  var $form = $(this).closest('form');
	  // Simulate form data, but only include the selected department value.
	  var data = {};
	  data[$department.attr('name')] = $department.val();
	  var citySelectId = $department.attr("id").replace("_department", "_city");
	  // Submit data via AJAX to the form's action path.
	  $.ajax({
	    url : $form.attr('action'),
	    type: $form.attr('method'),
	    data : data,
	    success: function(html) {
	      // Replace current position field ...
	      $('#'+citySelectId).replaceWith(
	        // ... with the returned one from the AJAX response.
	        $(html).find('#'+citySelectId)
	      );
	      // Position field now displays the appropriate positions.
	    }
	  });
	});
}
</script>
{% endblock javascripts %}
